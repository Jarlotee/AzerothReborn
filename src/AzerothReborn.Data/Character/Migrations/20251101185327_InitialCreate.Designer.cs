// <auto-generated />
using System;
using AzerothReborn.Data.Character;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AzerothReborn.Data.Character.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20251101185327_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Auction", b =>
                {
                    b.Property<long>("AuctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("The auction identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuctionId"));

                    b.Property<long>("BidPrice")
                        .HasColumnType("bigint")
                        .HasComment("The current bid price.");

                    b.Property<long>("BidderId")
                        .HasColumnType("bigint")
                        .HasComment("The identifier of character who bid on the item.");

                    b.Property<long>("BuyoutPrice")
                        .HasColumnType("bigint")
                        .HasComment("The buyout price.");

                    b.Property<byte>("ItemCount")
                        .HasColumnType("tinyint")
                        .HasComment("The count of items in the auction.");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasComment("The guid of the item.");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasComment("The character who created the auction.");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int")
                        .HasComment("The items template id.");

                    b.Property<long>("TimeLeft")
                        .HasColumnType("bigint")
                        .HasComment("The time before the auction expires in seconds.");

                    b.HasKey("AuctionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Auctions", t =>
                        {
                            t.HasComment("Auction System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Character", b =>
                {
                    b.Property<long>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("The character identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CharacterId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasComment("The account identifier owning the character.");

                    b.Property<string>("ActionBar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The encoded values of action bar mapped of the characer.");

                    b.Property<byte>("Agility")
                        .HasColumnType("tinyint")
                        .HasComment("The current agility of the characer.");

                    b.Property<string>("Auras")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The encoded values of auras of the characer.");

                    b.Property<byte>("BankSlots")
                        .HasColumnType("tinyint")
                        .HasComment("The number of bank slots unlocked for the characer.");

                    b.Property<byte>("Class")
                        .HasColumnType("tinyint")
                        .HasComment("The class of the characer.");

                    b.Property<long>("Copper")
                        .HasColumnType("bigint")
                        .HasComment("The current money in total copper pieces of the characer.");

                    b.Property<byte>("Energy")
                        .HasColumnType("tinyint")
                        .HasComment("The current energy of the characer.");

                    b.Property<int>("Experience")
                        .HasColumnType("int")
                        .HasComment("The experience of the character.");

                    b.Property<byte>("Face")
                        .HasColumnType("tinyint")
                        .HasComment("The face of the characer.");

                    b.Property<byte>("FacialHair")
                        .HasColumnType("tinyint")
                        .HasComment("The facial hair of the characer.");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint")
                        .HasComment("The gender of the characer.");

                    b.Property<int?>("GuiildId")
                        .HasColumnType("int")
                        .HasComment("The guild idenfier for the character's guild.");

                    b.Property<string>("GuildOfficerNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The officer note displayed on the guild interface.");

                    b.Property<string>("GuildPersonalNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The personal note displayed on the guild interface.");

                    b.Property<byte?>("GuildRank")
                        .HasColumnType("tinyint")
                        .HasComment("The guild idenfier for the character's guild.");

                    b.Property<byte>("HairColor")
                        .HasColumnType("tinyint")
                        .HasComment("The hair color of the characer.");

                    b.Property<byte>("HairStyle")
                        .HasColumnType("tinyint")
                        .HasComment("The hair style of the characer.");

                    b.Property<short>("Health")
                        .HasColumnType("smallint")
                        .HasComment("The current health of the characer.");

                    b.Property<byte>("HearthMapId")
                        .HasColumnType("tinyint")
                        .HasComment("The map idenfier for the position of the character's hearthstone.");

                    b.Property<float>("HearthPositionX")
                        .HasColumnType("real")
                        .HasComment("The x position of the character's hearthstone.");

                    b.Property<float>("HearthPositionY")
                        .HasColumnType("real")
                        .HasComment("The y position of the character's hearthstone.");

                    b.Property<float>("HearthPositionZ")
                        .HasColumnType("real")
                        .HasComment("The z position of the character's hearthstone.");

                    b.Property<byte>("HearthZoneId")
                        .HasColumnType("tinyint")
                        .HasComment("The zone idenfier for the position of the character's hearthstone.");

                    b.Property<byte>("Intellect")
                        .HasColumnType("tinyint")
                        .HasComment("The current intellect of the characer.");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint")
                        .HasComment("The level of the character.");

                    b.Property<DateTime?>("LogoutTimeUtc")
                        .HasColumnType("datetime2")
                        .HasComment("Indicates when the character last logged out.");

                    b.Property<short>("Mana")
                        .HasColumnType("smallint")
                        .HasComment("The current mana of the characer.");

                    b.Property<byte>("ManaType")
                        .HasColumnType("tinyint")
                        .HasComment("The current mana type of the characer.");

                    b.Property<byte>("MapId")
                        .HasColumnType("tinyint")
                        .HasComment("The map idenfier for the position of the character.");

                    b.Property<string>("MapsExplored")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The encoded values of maps that have been explored by the characer.");

                    b.Property<bool>("MoviePlayed")
                        .HasColumnType("bit")
                        .HasComment("Indicated whether the  into movie has been played for a new character.");

                    b.Property<long>("Name")
                        .HasMaxLength(21)
                        .HasColumnType("bigint")
                        .HasComment("The name of the character.");

                    b.Property<bool>("Online")
                        .HasColumnType("bit")
                        .HasComment("Indicates the character is online.");

                    b.Property<float>("Orientation")
                        .HasColumnType("real")
                        .HasComment("The orientation of the character. (e.g. which way its facing)");

                    b.Property<float>("PositionX")
                        .HasColumnType("real")
                        .HasComment("The x position of the character.");

                    b.Property<float>("PositionY")
                        .HasColumnType("real")
                        .HasComment("The y position of the character.");

                    b.Property<float>("PositionZ")
                        .HasColumnType("real")
                        .HasComment("The z position of the character.");

                    b.Property<byte>("Race")
                        .HasColumnType("tinyint")
                        .HasComment("The race of the characer.");

                    b.Property<byte>("Rage")
                        .HasColumnType("tinyint")
                        .HasComment("The current rage of the characer.");

                    b.Property<string>("Reputation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The encoded values of reputation of the characer.");

                    b.Property<byte>("RestState")
                        .HasColumnType("tinyint")
                        .HasComment("The indenfier of the state of rest of the characer.");

                    b.Property<byte>("RestedExperience")
                        .HasColumnType("tinyint")
                        .HasComment("The amount of rested experience the character has accrued.");

                    b.Property<byte>("Restrictions")
                        .HasColumnType("tinyint")
                        .HasComment("The restriction mask for the characer.");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The encoded values of skills of the characer.");

                    b.Property<byte>("Skin")
                        .HasColumnType("tinyint")
                        .HasComment("The skin color of the characer.");

                    b.Property<byte>("Spirit")
                        .HasColumnType("tinyint")
                        .HasComment("The current spirit of the characer.");

                    b.Property<byte>("Stamina")
                        .HasColumnType("tinyint")
                        .HasComment("The current stamina of the characer.");

                    b.Property<byte>("Strength")
                        .HasColumnType("tinyint")
                        .HasComment("The current strength of the characer.");

                    b.Property<byte>("TalentPoints")
                        .HasColumnType("tinyint")
                        .HasComment("The available talent points for the characer.");

                    b.Property<string>("TaxiFlags")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The encoded values of related taxis of the characer.");

                    b.Property<decimal>("TransportId")
                        .HasColumnType("decimal(20,0)")
                        .HasComment("The assigned transport identifier for the characer.");

                    b.Property<string>("TutorialFlags")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The encoded values of tutorials seen of the characer.");

                    b.Property<byte>("WatchedFactionIndex")
                        .HasColumnType("tinyint")
                        .HasComment("The faction relationship of the characer.");

                    b.Property<byte>("ZoneId")
                        .HasColumnType("tinyint")
                        .HasComment("The zone idenfier for the position of the character.");

                    b.HasKey("CharacterId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Characters", t =>
                        {
                            t.HasComment("Character System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Corpse", b =>
                {
                    b.Property<long>("CorpseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("The corpse identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CorpseId"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier.");

                    b.Property<byte?>("InstanceId")
                        .HasColumnType("tinyint")
                        .HasComment("The instance id where the corpse resides.");

                    b.Property<byte>("MapId")
                        .HasColumnType("tinyint")
                        .HasComment("The map idenfier for the position of the corpse.");

                    b.Property<float>("Orientation")
                        .HasColumnType("real")
                        .HasComment("The orientation of the corpse. (e.g. which way its facing)");

                    b.Property<float>("PositionX")
                        .HasColumnType("real")
                        .HasComment("The x position of the corpse.");

                    b.Property<float>("PositionY")
                        .HasColumnType("real")
                        .HasComment("The y position of the corpse.");

                    b.Property<float>("PositionZ")
                        .HasColumnType("real")
                        .HasComment("The z position of the corpse.");

                    b.Property<DateTime>("TimeUtc")
                        .HasColumnType("datetime2")
                        .HasComment("The timestamp of death.");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasComment("The type of corpse.");

                    b.HasKey("CorpseId");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.HasIndex("InstanceId");

                    b.HasIndex("TimeUtc");

                    b.HasIndex("Type");

                    b.ToTable("Corpses", t =>
                        {
                            t.HasComment("Death System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Friendship", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier.");

                    b.Property<long>("FriendId")
                        .HasColumnType("bigint")
                        .HasComment("The friend identifier.");

                    b.Property<byte>("Flags")
                        .HasColumnType("tinyint")
                        .HasComment("The flags describing the friend.");

                    b.HasKey("CharacterId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("Friendships", t =>
                        {
                            t.HasComment("Friend Social System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Guild", b =>
                {
                    b.Property<long>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("The guild identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GuildId"));

                    b.Property<byte>("BackgroundColor")
                        .HasColumnType("tinyint")
                        .HasComment("The color of the background of the guild.");

                    b.Property<byte>("BorderColor")
                        .HasColumnType("tinyint")
                        .HasComment("The color of the border of the guild.");

                    b.Property<byte>("BorderStyle")
                        .HasColumnType("tinyint")
                        .HasComment("The style of the border of the guild.");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2")
                        .HasComment("The timestamp of the creation of the guild.");

                    b.Property<byte>("EmblemColor")
                        .HasColumnType("tinyint")
                        .HasComment("The color of the emblem of the guild.");

                    b.Property<byte>("EmblemStyle")
                        .HasColumnType("tinyint")
                        .HasComment("The style of the emblem of the guild.");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The informational message for the guild.");

                    b.Property<long>("LeaderId")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier of the character is the guild leader.");

                    b.Property<string>("MessageOfTheDay")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The message of the day for the guild.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The name of the guild.");

                    b.Property<string>("Rank0")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The name of rank 0 within the guild.");

                    b.Property<int>("Rank0Rights")
                        .HasColumnType("int")
                        .HasComment("The rights of rank 0 within the guild.");

                    b.Property<string>("Rank1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The name of rank 1 within the guild.");

                    b.Property<int>("Rank1Rights")
                        .HasColumnType("int")
                        .HasComment("The rights of rank 1 within the guild.");

                    b.Property<string>("Rank2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The name of rank 2 within the guild.");

                    b.Property<int>("Rank2Rights")
                        .HasColumnType("int")
                        .HasComment("The rights of rank 2 within the guild.");

                    b.Property<string>("Rank3")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The name of rank 3 within the guild.");

                    b.Property<int>("Rank3Rights")
                        .HasColumnType("int")
                        .HasComment("The rights of rank 3 within the guild.");

                    b.Property<string>("Rank4")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The name of rank 4 within the guild.");

                    b.Property<int>("Rank4Rights")
                        .HasColumnType("int")
                        .HasComment("The rights of rank 4 within the guild.");

                    b.Property<string>("Rank5")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The name of rank 5 within the guild.");

                    b.Property<int>("Rank5Rights")
                        .HasColumnType("int")
                        .HasComment("The rights of rank 5 within the guild.");

                    b.Property<string>("Rank6")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The name of rank 6 within the guild.");

                    b.Property<int>("Rank6Rights")
                        .HasColumnType("int")
                        .HasComment("The rights of rank 6 within the guild.");

                    b.Property<string>("Rank7")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The name of rank 7 within the guild.");

                    b.Property<int>("Rank7Rights")
                        .HasColumnType("int")
                        .HasComment("The rights of rank 7 within the guild.");

                    b.Property<string>("Rank8")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The name of rank 8 within the guild.");

                    b.Property<int>("Rank8Rights")
                        .HasColumnType("int")
                        .HasComment("The rights of rank 8 within the guild.");

                    b.Property<string>("Rank9")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The name of rank 9 within the guild.");

                    b.Property<int>("Rank9Rights")
                        .HasColumnType("int")
                        .HasComment("The rights of rank 9 within the guild.");

                    b.HasKey("GuildId");

                    b.HasIndex("LeaderId")
                        .IsUnique();

                    b.ToTable("Guilds", t =>
                        {
                            t.HasComment("Guild System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Honors", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier.");

                    b.Property<int>("DishonorableKills")
                        .HasColumnType("int")
                        .HasComment("The total dishonorable kills for the character.");

                    b.Property<short>("DishonorableKillsToday")
                        .HasColumnType("smallint")
                        .HasComment("The total honorable kills accrued today for the character.");

                    b.Property<byte>("HighestRank")
                        .HasColumnType("tinyint")
                        .HasComment("The highest honor rank for the character.");

                    b.Property<int>("HonorableKills")
                        .HasColumnType("int")
                        .HasComment("The total honorable kills for the character.");

                    b.Property<short>("HonrableKillsToday")
                        .HasColumnType("smallint")
                        .HasComment("The total honorable kills accrued today for the character.");

                    b.Property<int>("KillsLastWeek")
                        .HasColumnType("int")
                        .HasComment("The total kills for the prior week for the character.");

                    b.Property<int>("KillsThisWeek")
                        .HasColumnType("int")
                        .HasComment("The total kills for this week for the character.");

                    b.Property<int>("KillsYesterday")
                        .HasColumnType("int")
                        .HasComment("The total kills accrued yesterday for the character.");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasComment("The honor points for the character.");

                    b.Property<int>("PointsLastWeek")
                        .HasColumnType("int")
                        .HasComment("The honor points for the prior week for the character.");

                    b.Property<short>("PointsThisWeek")
                        .HasColumnType("smallint")
                        .HasComment("The honor points for this week for the character.");

                    b.Property<int>("PointsYesterday")
                        .HasColumnType("int")
                        .HasComment("The honor points accrued yesterday for the character.");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint")
                        .HasComment("The current honor rank for the character.");

                    b.HasKey("CharacterId");

                    b.ToTable("Honors", t =>
                        {
                            t.HasComment("Honor System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.InstanceLock", b =>
                {
                    b.Property<long>("InstanceLockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("The instance lock identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("InstanceLockId"));

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier.");

                    b.Property<DateTime>("ExpirationUtc")
                        .HasColumnType("datetime2")
                        .HasComment("The timestamp  of indicating when the lock will expire.");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint")
                        .HasComment("The group identifier.");

                    b.Property<long>("InstanceId")
                        .HasColumnType("bigint")
                        .HasComment("The identifier of the instance that the group or characer is locked.");

                    b.Property<int>("MapId")
                        .HasColumnType("int")
                        .HasComment("The identifier of the map that is locked.");

                    b.HasKey("InstanceLockId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("MapId", "GroupId", "CharacterId")
                        .IsUnique()
                        .HasFilter("[GroupId] IS NOT NULL AND [CharacterId] IS NOT NULL");

                    b.ToTable("InstanceLocks", t =>
                        {
                            t.HasComment("Instance Lock System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Inventory", b =>
                {
                    b.Property<long>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("The item identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ItemId"));

                    b.Property<long>("Bag")
                        .HasColumnType("bigint")
                        .HasComment("The bag to which the item is assigned.");

                    b.Property<byte>("Charges")
                        .HasColumnType("tinyint")
                        .HasComment("The current charges available on the item.");

                    b.Property<byte>("Count")
                        .HasColumnType("tinyint")
                        .HasComment("The count of items in the stack.");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier indicating who created the item.");

                    b.Property<short>("Durability")
                        .HasColumnType("smallint")
                        .HasComment("The current durability of the item.");

                    b.Property<string>("Enchantment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The enchantment name for the item.");

                    b.Property<short>("Flags")
                        .HasColumnType("smallint")
                        .HasComment("The flags set of the item.");

                    b.Property<long?>("GifterId")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier indicating who gifted the item.");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier.");

                    b.Property<short>("RandomProperties")
                        .HasColumnType("smallint")
                        .HasComment("The random properties for the item.");

                    b.Property<byte>("Slot")
                        .HasColumnType("tinyint")
                        .HasComment("The slot to which the item is assigned.");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int")
                        .HasComment("The items template identifier.");

                    b.Property<short>("TextId")
                        .HasColumnType("smallint")
                        .HasComment("The text identifier for the item.");

                    b.HasKey("ItemId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GifterId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Inventories", t =>
                        {
                            t.HasComment("Inventory System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Mail", b =>
                {
                    b.Property<int>("MailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The mail identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MailId"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The body of the mail.");

                    b.Property<long>("CopperRequred")
                        .HasColumnType("bigint")
                        .HasComment("The amount of money requuired to open the mail (COD).");

                    b.Property<long>("CopperSent")
                        .HasColumnType("bigint")
                        .HasComment("The amount of money sent in the mail.");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasComment("The item id being sent.");

                    b.Property<byte>("Read")
                        .HasColumnType("tinyint")
                        .HasComment("The state of the mail being read.");

                    b.Property<long?>("RecieverId")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier for the reciever.");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier for the sender.");

                    b.Property<DateTime>("SentUtc")
                        .HasColumnType("datetime2")
                        .HasComment("The timestamp when the mail was sent.");

                    b.Property<short>("Stationary")
                        .HasColumnType("smallint")
                        .HasComment("The type of stationary used.");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The subject of the mail.");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasComment("The type of mail sent.");

                    b.HasKey("MailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("RecieverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Mail", t =>
                        {
                            t.HasComment("Mail System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Pet", b =>
                {
                    b.Property<long>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("The pet identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PetId"));

                    b.Property<string>("AB")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Who knows?");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasComment("The identifer of the owning character.");

                    b.Property<long>("CreatedBySpellId")
                        .HasColumnType("bigint")
                        .HasComment("The spell identifer used to create the pet.");

                    b.Property<long>("Entry")
                        .HasColumnType("bigint")
                        .HasComment("No idea. Maybe and index for when you have multiple pets?");

                    b.Property<long>("Experience")
                        .HasColumnType("bigint")
                        .HasComment("The current experience of the pet.");

                    b.Property<int>("Hapiness")
                        .HasColumnType("int")
                        .HasComment("The current hapiness of the pet.");

                    b.Property<long>("Health")
                        .HasColumnType("bigint")
                        .HasComment("The current health of the pet.");

                    b.Property<DateTime>("LastSaveUtc")
                        .HasColumnType("datetime2")
                        .HasComment("The timestamp of the pets last save.");

                    b.Property<long>("Level")
                        .HasColumnType("bigint")
                        .HasComment("The level of the pet.");

                    b.Property<int>("Loyalty")
                        .HasColumnType("int")
                        .HasComment("The current loyalty level of the pet.");

                    b.Property<long>("LoyaltyPoints")
                        .HasColumnType("bigint")
                        .HasComment("The current loyalty points of the pet.");

                    b.Property<long>("Mana")
                        .HasColumnType("bigint")
                        .HasComment("The current mana of the pet.");

                    b.Property<long>("ModelId")
                        .HasColumnType("bigint")
                        .HasComment("The model identifer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The current training points of the pet.");

                    b.Property<byte>("PetType")
                        .HasColumnType("tinyint")
                        .HasComment("The category of the pet.");

                    b.Property<byte>("ReactState")
                        .HasColumnType("tinyint")
                        .HasComment("The current behavior of the pet.");

                    b.Property<bool>("Renamed")
                        .HasColumnType("bit")
                        .HasComment("Indicates the pet was renamed.");

                    b.Property<int>("ResetTalentsCost")
                        .HasColumnType("int")
                        .HasComment("The cost required to reset the pets talents.");

                    b.Property<DateTime>("ResetTalentsTimeUtc")
                        .HasColumnType("datetime2")
                        .HasComment("The cooldown required to reset the pets talents.");

                    b.Property<long>("Slot")
                        .HasColumnType("bigint")
                        .HasComment("Which slot the pet is equiped to.");

                    b.Property<string>("TeachSpellData")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Who knows?");

                    b.Property<int>("TrainingPoints")
                        .HasColumnType("int")
                        .HasComment("The current training points of the pet.");

                    b.HasKey("PetId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Pets", t =>
                        {
                            t.HasComment("Pet System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Petition", b =>
                {
                    b.Property<long>("PetitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("The petition identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PetitionId"));

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasComment("The item identifier.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The petition name.");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier of the character who owns the petition.");

                    b.Property<byte>("Signatures")
                        .HasColumnType("tinyint")
                        .HasComment("The number of signatures gathered.");

                    b.Property<long?>("Signer1")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier of the signature gathered.");

                    b.Property<long?>("Signer2")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier of the signature gathered.");

                    b.Property<long?>("Signer3")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier of the signature gathered.");

                    b.Property<long?>("Signer4")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier of the signature gathered.");

                    b.Property<long?>("Signer5")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier of the signature gathered.");

                    b.Property<long?>("Signer6")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier of the signature gathered.");

                    b.Property<long?>("Signer7")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier of the signature gathered.");

                    b.Property<long?>("Signer8")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier of the signature gathered.");

                    b.Property<long?>("Signer9")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier of the signature gathered.");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasComment("The petition type.");

                    b.HasKey("PetitionId");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Petitions", t =>
                        {
                            t.HasComment("Guild System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Quest", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier.");

                    b.Property<long>("QuestId")
                        .HasColumnType("bigint")
                        .HasComment("The quest identifier.");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("The status of the quest.");

                    b.HasKey("CharacterId", "QuestId");

                    b.ToTable("Quests", t =>
                        {
                            t.HasComment("Quests Tracking System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Spell", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier.");

                    b.Property<long>("SpellId")
                        .HasColumnType("bigint")
                        .HasComment("The spell identifier.");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the spell is active.");

                    b.Property<long>("Cooldown")
                        .HasColumnType("bigint")
                        .HasComment("The cooldown of the spell.");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasComment("The item identifier used to cast the spell.");

                    b.HasKey("CharacterId", "SpellId");

                    b.HasIndex("ItemId");

                    b.ToTable("Spells", t =>
                        {
                            t.HasComment("Spell Tracking System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Ticket", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasComment("The character identifier.");

                    b.Property<byte>("MapId")
                        .HasColumnType("tinyint")
                        .HasComment("The map idenfier for the position of the character.");

                    b.Property<float>("PositionX")
                        .HasColumnType("real")
                        .HasComment("The x position of the character.");

                    b.Property<float>("PositionY")
                        .HasColumnType("real")
                        .HasComment("The y position of the character.");

                    b.Property<float>("PositionZ")
                        .HasColumnType("real")
                        .HasComment("The z position of the character.");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The text of the ticket.");

                    b.HasKey("CharacterId");

                    b.ToTable("Tickets", t =>
                        {
                            t.HasComment("Friend Social System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Corpse", b =>
                {
                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Character")
                        .WithOne("Corpse")
                        .HasForeignKey("AzerothReborn.Data.Character.Models.Corpse", "CharacterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Friendship", b =>
                {
                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Character")
                        .WithMany("Friendships")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Friend");
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Guild", b =>
                {
                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Leader")
                        .WithOne("OwnedGuild")
                        .HasForeignKey("AzerothReborn.Data.Character.Models.Guild", "LeaderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Honors", b =>
                {
                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Character")
                        .WithOne("Honors")
                        .HasForeignKey("AzerothReborn.Data.Character.Models.Honors", "CharacterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.InstanceLock", b =>
                {
                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Character")
                        .WithMany("InstanceLocks")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Character");
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Inventory", b =>
                {
                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Creator")
                        .WithMany("Creations")
                        .HasForeignKey("CreatorId");

                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Gifter")
                        .WithMany("Gifts")
                        .HasForeignKey("GifterId");

                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Owner")
                        .WithMany("Inventory")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Gifter");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Mail", b =>
                {
                    b.HasOne("AzerothReborn.Data.Character.Models.Inventory", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Reciever")
                        .WithMany("MailRecieved")
                        .HasForeignKey("RecieverId");

                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Sender")
                        .WithMany("MailSent")
                        .HasForeignKey("SenderId");

                    b.Navigation("Item");

                    b.Navigation("Reciever");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Pet", b =>
                {
                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Character")
                        .WithMany("Pets")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Petition", b =>
                {
                    b.HasOne("AzerothReborn.Data.Character.Models.Inventory", "Item")
                        .WithOne("Petition")
                        .HasForeignKey("AzerothReborn.Data.Character.Models.Petition", "ItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Owner")
                        .WithMany("Petitions")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Quest", b =>
                {
                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Character")
                        .WithMany("Quests")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Spell", b =>
                {
                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Character")
                        .WithMany("Spells")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AzerothReborn.Data.Character.Models.Inventory", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Ticket", b =>
                {
                    b.HasOne("AzerothReborn.Data.Character.Models.Character", "Character")
                        .WithOne("Ticket")
                        .HasForeignKey("AzerothReborn.Data.Character.Models.Ticket", "CharacterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Character", b =>
                {
                    b.Navigation("Corpse");

                    b.Navigation("Creations");

                    b.Navigation("Friendships");

                    b.Navigation("Gifts");

                    b.Navigation("Honors");

                    b.Navigation("InstanceLocks");

                    b.Navigation("Inventory");

                    b.Navigation("MailRecieved");

                    b.Navigation("MailSent");

                    b.Navigation("OwnedGuild");

                    b.Navigation("Petitions");

                    b.Navigation("Pets");

                    b.Navigation("Quests");

                    b.Navigation("Spells");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("AzerothReborn.Data.Character.Models.Inventory", b =>
                {
                    b.Navigation("Petition");
                });
#pragma warning restore 612, 618
        }
    }
}
