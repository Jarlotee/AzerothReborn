// <auto-generated />
using System;
using AzerothReborn.Data.Auth;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AzerothReborn.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20251029082652_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AzerothReborn.Data.Auth.Models.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("The account identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountId"));

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2")
                        .HasComment("The date when the account was created.");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Email address associated with the account");

                    b.Property<byte>("Expansion")
                        .HasColumnType("tinyint")
                        .HasComment("Which maximum expansion content a user has access to.");

                    b.Property<byte>("FailedLogins")
                        .HasColumnType("tinyint")
                        .HasComment("The number of failed logins attempted on the account.");

                    b.Property<string>("LastIpAddress")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The IP used in the last login attempt.");

                    b.Property<DateTime?>("LastLoginUtc")
                        .HasColumnType("datetime2")
                        .HasComment("The date when the account was last logged into.");

                    b.Property<byte?>("Locale")
                        .HasColumnType("tinyint")
                        .HasComment("The locale used by the client logged into this account.");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit")
                        .HasComment("Indicates whether the account has been locked or not.");

                    b.Property<DateTime?>("MuteTime")
                        .HasColumnType("datetime2")
                        .HasComment("The time when the account will be unmuted.");

                    b.Property<string>("OperatingSystem")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasComment("The Operating System of the connected client");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Password salt value.");

                    b.Property<byte>("SecurityLevel")
                        .HasColumnType("tinyint")
                        .HasComment("The account security level.");

                    b.Property<string>("SessionKey")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Session Key.");

                    b.Property<string>("ShaPasswordHash")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("This field contains the encrypted SHA1 password.");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("The account user name.");

                    b.Property<string>("ValidationHash")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The validated hash value.");

                    b.HasKey("AccountId");

                    b.HasIndex("SecurityLevel");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Accounts", t =>
                        {
                            t.HasComment("Account System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Auth.Models.AccountBanned", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasComment("The account identifier.");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasComment("Is the ban is currently active or not.");

                    b.Property<DateTime>("BanDateUtc")
                        .HasColumnType("datetime2")
                        .HasComment("The date when the account was banned");

                    b.Property<string>("BannedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The character that banned the account.");

                    b.Property<string>("BannedReason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The reason for the ban.");

                    b.Property<DateTime>("UnBanDateUtc")
                        .HasColumnType("datetime2")
                        .HasComment("The date when the account will be automatically unbanned.");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountId", "Active");

                    b.ToTable("AccountsBanned", t =>
                        {
                            t.HasComment("Banned Account List");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Auth.Models.IpAddressBanned", b =>
                {
                    b.Property<string>("IpAddress")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The IP address that is banned.");

                    b.Property<DateTime>("BanDateUtc")
                        .HasColumnType("datetime2")
                        .HasComment("The date when the ip address was banned");

                    b.Property<string>("BannedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The character that banned the account.");

                    b.Property<string>("BannedReason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The reason for the ban.");

                    b.Property<DateTime>("UnBanDateUtc")
                        .HasColumnType("datetime2")
                        .HasComment("The date when the ip address will be automatically unbanned.");

                    b.HasKey("IpAddress");

                    b.HasIndex("IpAddress", "BanDateUtc");

                    b.ToTable("IpAddressesBanned", t =>
                        {
                            t.HasComment("Banned IP Addresses");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Auth.Models.Realm", b =>
                {
                    b.Property<long>("RealmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("The realm identifer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RealmId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The public IP address of the realm server.");

                    b.Property<byte>("AllowedSecurityLevel")
                        .HasColumnType("tinyint")
                        .HasComment("Minimum security level (see account) for realm visibility.");

                    b.Property<byte>("Icon")
                        .HasColumnType("tinyint")
                        .HasComment("The icon of the realm.");

                    b.Property<string>("LocalAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The local IP address of the realm server.");

                    b.Property<string>("LocalSubnetMask")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The subnet mask used for the local network.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("The name of the realm");

                    b.Property<decimal>("Population")
                        .HasColumnType("decimal(20,0)")
                        .HasComment("The current realm population.");

                    b.Property<int>("Port")
                        .HasColumnType("int")
                        .HasComment("The port where the realm server is running.");

                    b.Property<byte>("RealmFlags")
                        .HasColumnType("tinyint")
                        .HasComment("Supported masks for the realm.");

                    b.Property<string>("SupportedClients")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("The supported clients that the realm will accept.");

                    b.Property<byte>("TimeZone")
                        .HasColumnType("tinyint")
                        .HasComment("The realm timezone.");

                    b.HasKey("RealmId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Realms", t =>
                        {
                            t.HasComment("Realm System");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Auth.Models.RealmCharacters", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasComment("The account identifier.");

                    b.Property<long>("RealmId")
                        .HasColumnType("bigint")
                        .HasComment("The realm identifer");

                    b.Property<byte>("CharacterCount")
                        .HasColumnType("tinyint")
                        .HasComment("The number of characters the account has on the realm.");

                    b.HasKey("AccountId", "RealmId");

                    b.HasIndex("RealmId");

                    b.ToTable("RealmCharacters", t =>
                        {
                            t.HasComment("Realm Character Tracker");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Auth.Models.RealmUptime", b =>
                {
                    b.Property<long>("RealmId")
                        .HasColumnType("bigint")
                        .HasComment("The realm identifer");

                    b.Property<string>("StartTimeReadable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The human readable description of the realm start timestamp.");

                    b.Property<DateTime>("StartTimeUtc")
                        .HasColumnType("datetime2")
                        .HasComment("The timestamp of the realm starting.");

                    b.Property<decimal>("Uptime")
                        .HasColumnType("decimal(20,0)")
                        .HasComment("The uptime of the realm in seconds.");

                    b.HasKey("RealmId");

                    b.ToTable("RealmUptime", t =>
                        {
                            t.HasComment("Uptime system");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Auth.Models.WardenLog", b =>
                {
                    b.Property<decimal>("WardenLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasComment("The warden log identifer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("WardenLogId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasComment("The account identifier.");

                    b.Property<byte>("Action")
                        .HasColumnType("tinyint")
                        .HasComment("Action taken (see enum WardenActions)");

                    b.Property<short>("FailedCheckId")
                        .HasColumnType("smallint")
                        .HasComment("The warden failed check inentifier");

                    b.Property<int>("MapId")
                        .HasColumnType("int")
                        .HasComment("The map identifier. (See map.dbc)");

                    b.Property<int>("PlayerGuid")
                        .HasColumnType("int")
                        .HasComment("The player identifier.");

                    b.Property<float>("PositionX")
                        .HasColumnType("real")
                        .HasComment("The x location of the character.");

                    b.Property<float>("PositionY")
                        .HasColumnType("real")
                        .HasComment("The y location of the character.");

                    b.Property<float>("PositionZ")
                        .HasColumnType("real")
                        .HasComment("The z location of the character.");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("WardenLogId");

                    b.ToTable("WardenLog", t =>
                        {
                            t.HasComment("Warden log of failed checks");
                        });
                });

            modelBuilder.Entity("AzerothReborn.Data.Auth.Models.AccountBanned", b =>
                {
                    b.HasOne("AzerothReborn.Data.Auth.Models.Account", "Account")
                        .WithOne("Ban")
                        .HasForeignKey("AzerothReborn.Data.Auth.Models.AccountBanned", "AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AzerothReborn.Data.Auth.Models.RealmCharacters", b =>
                {
                    b.HasOne("AzerothReborn.Data.Auth.Models.Account", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AzerothReborn.Data.Auth.Models.Realm", "Realm")
                        .WithMany("Characters")
                        .HasForeignKey("RealmId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Realm");
                });

            modelBuilder.Entity("AzerothReborn.Data.Auth.Models.RealmUptime", b =>
                {
                    b.HasOne("AzerothReborn.Data.Auth.Models.Realm", "Realm")
                        .WithOne("Uptime")
                        .HasForeignKey("AzerothReborn.Data.Auth.Models.RealmUptime", "RealmId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Realm");
                });

            modelBuilder.Entity("AzerothReborn.Data.Auth.Models.Account", b =>
                {
                    b.Navigation("Ban");

                    b.Navigation("Characters");
                });

            modelBuilder.Entity("AzerothReborn.Data.Auth.Models.Realm", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Uptime");
                });
#pragma warning restore 612, 618
        }
    }
}
